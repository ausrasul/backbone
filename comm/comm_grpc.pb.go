// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package comm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommClient is the client API for Comm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommClient interface {
	OpenComm(ctx context.Context, opts ...grpc.CallOption) (Comm_OpenCommClient, error)
}

type commClient struct {
	cc grpc.ClientConnInterface
}

func NewCommClient(cc grpc.ClientConnInterface) CommClient {
	return &commClient{cc}
}

func (c *commClient) OpenComm(ctx context.Context, opts ...grpc.CallOption) (Comm_OpenCommClient, error) {
	stream, err := c.cc.NewStream(ctx, &Comm_ServiceDesc.Streams[0], "/comm.Comm/OpenComm", opts...)
	if err != nil {
		return nil, err
	}
	x := &commOpenCommClient{stream}
	return x, nil
}

type Comm_OpenCommClient interface {
	Send(*Command) error
	Recv() (*Command, error)
	grpc.ClientStream
}

type commOpenCommClient struct {
	grpc.ClientStream
}

func (x *commOpenCommClient) Send(m *Command) error {
	return x.ClientStream.SendMsg(m)
}

func (x *commOpenCommClient) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommServer is the server API for Comm service.
// All implementations must embed UnimplementedCommServer
// for forward compatibility
type CommServer interface {
	OpenComm(Comm_OpenCommServer) error
	mustEmbedUnimplementedCommServer()
}

// UnimplementedCommServer must be embedded to have forward compatible implementations.
type UnimplementedCommServer struct {
}

func (UnimplementedCommServer) OpenComm(Comm_OpenCommServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenComm not implemented")
}
func (UnimplementedCommServer) mustEmbedUnimplementedCommServer() {}

// UnsafeCommServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommServer will
// result in compilation errors.
type UnsafeCommServer interface {
	mustEmbedUnimplementedCommServer()
}

func RegisterCommServer(s grpc.ServiceRegistrar, srv CommServer) {
	s.RegisterService(&Comm_ServiceDesc, srv)
}

func _Comm_OpenComm_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommServer).OpenComm(&commOpenCommServer{stream})
}

type Comm_OpenCommServer interface {
	Send(*Command) error
	Recv() (*Command, error)
	grpc.ServerStream
}

type commOpenCommServer struct {
	grpc.ServerStream
}

func (x *commOpenCommServer) Send(m *Command) error {
	return x.ServerStream.SendMsg(m)
}

func (x *commOpenCommServer) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Comm_ServiceDesc is the grpc.ServiceDesc for Comm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comm.Comm",
	HandlerType: (*CommServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenComm",
			Handler:       _Comm_OpenComm_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "comm.proto",
}
